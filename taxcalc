#!/bin/bash
# ---------------------------------------------------------------------------
# taxcalc - Calculates accumulated weekly tax for the given values in Australia.

# Copyright 2021, Peter, <frogsinspace@gmail.com>
# All rights reserved.

# Usage: taxcalc [-h|--help] [-a|--anual grossincome]

# Revision history:
# 2021-04-24 Created by new_script ver. 3.3
# ---------------------------------------------------------------------------

PROGNAME=${0##*/}
VERSION="0.1"
TOTAL=0
NUMBERS=$@

clean_up() { # Perform pre-exit housekeeping
  return
}

error_exit() {
  echo -e "${PROGNAME}: ${1:-"Unknown Error"}" >&2
  clean_up
  exit 1
}

graceful_exit() {
  clean_up
  exit
}

signal_exit() { # Handle trapped signals
  case $1 in
    INT)
      error_exit "Program interrupted by user" ;;
    TERM)
      echo -e "\n$PROGNAME: Program terminated" >&2
      graceful_exit ;;
    *)
      error_exit "$PROGNAME: Terminating on unknown signal" ;;
  esac
}

usage() {
  echo -e "Usage: $PROGNAME [-h|--help] [-a|--anual grossincome]"
}

help_message() {
  cat <<- _EOF_
  $PROGNAME ver. $VERSION
  Calculates accumulated weekly tax for the given values in Australia.

  $(usage)

  Options:
  -h, --help                Display this help message and exit.
  -a, --anual grossincome   Displays Tax information for the given
                            yearly gross income.
  
  Note:
      With no options this script will calculate and display tax
      information for the arguments given, that represent the sum
      of money received for a given week.

_EOF_
  return
}

# Functions for Tax Brackets
print_aggregated(){
		RATE=$(echo "scale=7; ($TAX / 54) / $TOTAL" | bc -l)
		printf "%s\t%s%'.2f\n" "Yearly income tax payable:" "\$" "$TAX"
		echo
        echo "Aggregated weekly tax payments."
		echo "========================================================================="
		LENGTH_TAX=`printf "%'.2f\n" $(echo "scale=2; $TAX / 54" | bc -l)`
		for i in $NUMBERS
		do
				AGG_RATE=$(echo "scale=2; $i * $RATE" | bc)
				LENGTH_TEST=`printf "%'.2f\n" $(echo "scale=2; $i" | bc -l)`
				LENGTH_AGG=`printf "%'.2f\n" $(echo "scale=2; $AGG_RATE" | bc -l)`
				AGG_NETINC=$(echo "scale=2; $i - $AGG_RATE" | bc)
				TOTAL_NETINC=$(echo "scale=2; $TOTAL - ($TAX / 54)" | bc)
				if [ ${#LENGTH_TEST} -lt 7 ]
						then
						printf "%s%'.2f%s\t\t\t%s%'.2f" "Tax on \$" "$i" ":" "\$" "$AGG_RATE" 
						if [ ${#LENGTH_AGG} -lt 7 ]
							then
							printf "\t\t%s\t%s%'.2f\n" "You receive" "\$" "$AGG_NETINC"
						elif [ ${#LENGTH_AGG} -lt 12 ]
							then
							printf "\t%s\t%s%'.2f\n" "You receive" "\$" "$AGG_NETINC"
						fi
				elif [ ${#LENGTH_TEST} -lt 12 ]
						then
						printf "%s%'.2f%s\t\t%s%'.2f" "Tax on \$" "$i" ":" "\$" "$AGG_RATE"
						if [ ${#LENGTH_AGG} -lt 7 ]
							then
							printf "\t\t%s\t%s%'.2f\n" "You receive" "\$" "$AGG_NETINC"
						elif [ ${#LENGTH_AGG} -lt 12 ]
							then
							printf "\t%s\t%s%'.2f\n" "You receive" "\$" "$AGG_NETINC"
						fi
				fi
		done
		printf "%s\t%s%'.2f" "Total weekly income tax:" "\$" "$(echo "scale=2; $TAX / 54" | bc -l)"
		if [ ${#LENGTH_TAX} -lt 7 ]
			then
			printf "\t\t%s\t%s%'.2f\n" "You receive" "\$" "$TOTAL_NETINC"
		elif [ ${#LENGTH_TAX} -lt 12 ]
			then
			printf "\t%s\t%s%'.2f\n" "You receive" "\$" "$TOTAL_NETINC"
		fi
		echo
}

eighteen_two() {
		TAX=$(echo "scale=2; (($TAXABLE_INCOME) - 18200) * 0.19" | bc)
		print_aggregated
}

thirty_seven() {
		TAX=$(echo "scale=2; ((($TAXABLE_INCOME) - 37000) * 0.325) + 3572" | bc)
		print_aggregated
}

ninety() {
		TAX=$(echo "scale=2; ((($TAXABLE_INCOME) - 90000) * 0.37) + 20797" | bc)
		print_aggregated
}

one_eighty() {
		TAX=$(echo "scale=2; ((($TAXABLE_INCOME) - 180000) * 0.45) + 54097" | bc)
		print_aggregated
}

heavy_lifting(){
		TEST=`printf "%.2f\n" $(echo "$TOTAL * 54" | bc -l)`
		#echo "TEST \= $TEST & TOTAL \= $TOTAL & NUMBERS \= $NUMBERS"

if [ $(echo "$TEST < 18200"|bc -l) -eq 1 ]		
	then
		echo	
		echo "ATO Tax Bracket for 0 - \$18,200"
		echo "NIL"
		echo "=========================================="
		echo "No tax is payable on  \$$TEST"
		echo
elif [ $(echo "$TEST > 18200"|bc -l) -eq 1 ]
	then
        if [ $(echo "$TEST > 37000"|bc -l) -eq 1 ]
		then
			if [ $(echo "$TEST > 90000"|bc -l) -eq 1 ]
			then
				if [ $(echo "$TEST > 180000"|bc -l) -eq 1 ]
				then
					echo
					echo "ATO Tax Bracket for \$180,001 and above."
					echo "------------------------------------------"
					echo "\$54,097 plus 45c for each \$1 over \$180,00" 
					echo "=========================================="
					printf "%s\t\t%s%'.2f\n" "Combined weekly income:" "\$" "$TOTAL" 
					printf "%s\t\t%s%'.2f\n" "Yearly taxable income:" "\$" "$TAXABLE_INCOME"
					one_eighty
					graceful_exit
				fi	
				echo
				echo "ATO Tax Bracket for \$90,001 - \$180,000."
				echo "------------------------------------------"
				echo "\$20,797 plus 37c for each \$1 over \$90,000"
				echo "=========================================="
				printf "%s\t\t%s%'.2f\n" "Combined weekly income:" "\$" "$TOTAL" 
				printf "%s\t\t%s%'.2f\n" "Yearly taxable income:" "\$" "$TAXABLE_INCOME"
				ninety
				graceful_exit
			fi
			echo
			echo "ATO Tax Bracket for \$37,001 - \$90,000."
			echo "------------------------------------------"
			echo "\$3,572 plus 32.5c for each \$1 over \$37,000"
			echo "=========================================="
			printf "%s\t\t%s%'.2f\n" "Combined weekly income:" "\$" "$TOTAL" 
			printf "%s\t\t%s%'.2f\n" "Yearly taxable income:" "\$" "$TAXABLE_INCOME"
			thirty_seven
			graceful_exit
		fi

		echo
		echo "ATO Tax Bracket for \$18,201 - \$37,000."
		echo "------------------------------------------"
		echo "19c for each \$1 over \$18,200"
		echo "=========================================="
		printf "%s\t\t%s%'.2f\n" "Combined weekly income:" "\$" "$TOTAL" 
		printf "%s\t\t%s%'.2f\n" "Yearly taxable income:" "\$" "$TAXABLE_INCOME"
		eighteen_two
fi
}

# Trap signals
trap "signal_exit TERM" TERM HUP
trap "signal_exit INT"  INT



# Parse command-line
while [[ -n $1 ]]; do
  case $1 in
    -h | --help)
      help_message; graceful_exit ;;
	-a | --anual)
		TAXABLE_INCOME="$2"
		NUMBERS=`printf "%0.2f\n" $(echo "$TAXABLE_INCOME / 54" | bc -l)`
		TOTAL=$NUMBERS
		heavy_lifting
		graceful_exit ;;
    -* | --*)
      usage
      error_exit "Unknown option $1" ;;
    *)
       TOTAL=$(echo "$1 + $TOTAL" | bc);;
  esac
  shift
done

# Main logic
TAXABLE_INCOME=`printf "%0.2f\n" $(echo "scale=2; $TOTAL * 54" | bc -l)`
heavy_lifting
graceful_exit


